@page "/enrol-etudiant"
@using ControleAcces.Application.DTOs
@using ControleAcces.Application.UseCases
@inject EnrolerEtudiantUseCase EnrolerEtudiantUseCase
@inject IJSRuntime JS
@rendermode InteractiveServer

<div class="container mt-4">
    <div class="card shadow-lg p-4">
        <h3 class="text-center text-primary mb-4">
            <i class="bi bi-person-plus-fill"></i> Enrôlement Étudiant
        </h3>

        <!-- Zone de recherche -->
        <div class="row g-3 align-items-end">
            <div class="col-md-6">
                <label class="form-label fw-bold">Matricule :</label>
                <input @bind="matricule" class="form-control form-control-sm" placeholder="Entrez le matricule" />
            </div>
            <div class="col-md-6">
                <button @onclick="RechercherEtudiant" class="btn btn-primary btn-sm w-100">
                    <i class="bi bi-search"></i> Chercher
                </button>
            </div>
        </div>

        <!-- Infos étudiant -->
        @if (etudiant != null)
        {
            <hr />
            <div class="card mt-3 shadow-sm p-3">
                <h5 class="text-secondary mb-3">
                    <i class="bi bi-person-badge"></i> Informations Étudiant
                </h5>
                <p><strong>Nom Complet :</strong> @etudiant.NomComplet</p>
                <p><strong>Email :</strong> @etudiant.Email</p>
                <p><strong>Promotion :</strong> @etudiant.Promotion</p>

                <div class="mt-3 d-flex gap-2">
                    <button @onclick="ScannerCarte" class="btn btn-success btn-sm flex-fill">
                        <i class="bi bi-upc-scan"></i> Scanner Carte RFID
                    </button>
                    <button @onclick="ScannerEmpreinte" class="btn btn-secondary btn-sm flex-fill">
                        <i class="bi bi-fingerprint"></i> Scanner Empreinte Digitale
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private string matricule;
    private EtudiantDTO? etudiant;

    private async Task RechercherEtudiant()
    {
        etudiant = await EnrolerEtudiantUseCase.ChercherEtudiantAsync(matricule);
        if (etudiant == null)
        {
            await JS.InvokeVoidAsync("alert", "Étudiant introuvable !");
        }
    }

    private async Task ScannerCarte()
    {
        if (etudiant == null) return;
        var success = await EnrolerEtudiantUseCase.ScannerCarteRFIDAsync(etudiant.Id);
        await JS.InvokeVoidAsync("alert", success ? "Carte RFID enrôlée avec succès." : "Échec du scan de la carte RFID.");
    }

    private async Task ScannerEmpreinte()
    {
        if (etudiant == null) return;
        var success = await EnrolerEtudiantUseCase.ScannerEmpreinteDigitaleAsync(etudiant.Id);
        await JS.InvokeVoidAsync("alert", success ? "Empreinte digitale enrôlée avec succès." : "Échec du scan d'empreinte.");
    }
}
