@page "/sessions"
@using ControleAcces.Application.Services
@using ControleAcces.Application.UseCases
@using ControleAcces.Domain.Entities
@inject CreerSessionUseCase CreerSessionUseCase
@inject SessionService SessionService
@inject IJSRuntime JS
@rendermode InteractiveServer

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="fw-bold text-primary">Gestion des Sessions</h2>
        <i class="bi bi-calendar2-week fs-3 text-secondary"></i>
    </div>

    <!-- Formulaire -->
    <div class="card shadow-lg border-0 rounded-3 mb-4">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0">Créer une Nouvelle Session</h5>
        </div>
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-6">
                    <label class="form-label fw-semibold">Nom Session</label>
                    <input @bind="nomSession" class="form-control" placeholder="Ex: Session Janvier 2025" />
                </div>
                <div class="col-md-6">
                    <label class="form-label fw-semibold">Année Académique</label>
                    <input @bind="anneeAcademique" class="form-control" placeholder="Ex: 2024-2025" />
                </div>
                <div class="col-md-6">
                    <label class="form-label fw-semibold">Date Début</label>
                    <input type="date" @bind="dateDebut" class="form-control" />
                </div>
                <div class="col-md-6">
                    <label class="form-label fw-semibold">Date Fin</label>
                    <input type="date" @bind="dateFin" class="form-control" />
                </div>
            </div>
            <div class="text-end mt-4">
                <button @onclick="CreerSession" class="btn btn-success px-4">
                    <i class="bi bi-plus-circle me-2"></i>Créer
                </button>
            </div>
        </div>
    </div>

    <!-- Liste -->
    <div class="card shadow-sm border-0 rounded-3">
        <div class="card-header bg-light">
            <h5 class="mb-0">Sessions Existantes</h5>
        </div>
        <div class="table-responsive">
            <table class="table table-hover align-middle mb-0">
                <thead class="table-primary">
                    <tr>
                        <th>Nom</th>
                        <th>Année Académique</th>
                        <th>Date Début</th>
                        <th>Date Fin</th>
                    </tr>
                </thead>
                <tbody>
                    @if (sessions.Count == 0)
                    {
                        <tr>
                            <td colspan="4" class="text-center text-muted py-4">
                                Aucune session disponible.
                            </td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var session in sessions)
                        {
                            <tr>
                                <td class="fw-semibold">@session.Nom</td>
                                <td>@session.AnneeAcademique</td>
                                <td>@session.DateDebut.ToString("dd/MM/yyyy")</td>
                                <td>@session.DateFin.ToString("dd/MM/yyyy")</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private string nomSession;
    private string anneeAcademique;
    private DateTime dateDebut = DateTime.Today;
    private DateTime dateFin = DateTime.Today;
    private List<Session> sessions = new();

    protected override async Task OnInitializedAsync()
    {
        sessions = await SessionService.GetAllSessionsAsync();
    }

    private async Task CreerSession()
    {
        var success = await CreerSessionUseCase.CreerSessionAsync(nomSession, dateDebut, dateFin, anneeAcademique);
        if (success)
        {
            await JS.InvokeVoidAsync("alert", "✅ Session créée avec succès.");
            sessions = await SessionService.GetAllSessionsAsync();
            nomSession = string.Empty;
            anneeAcademique = string.Empty;
            dateDebut = dateFin = DateTime.Today;
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "❌ Échec de la création de la session.");
        }
    }
}
