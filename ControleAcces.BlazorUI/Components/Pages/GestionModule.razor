@page "/gestion-modules"
@using ControleAcces.Application.DTOs
@using ControleAcces.Application.UseCases
@inject AffecterModulesAuxSallesUseCase UseCase
@inject IJSRuntime JS
@rendermode InteractiveServer

<h3 class="mb-4 fw-bold text-primary">
    <i class="bi bi-journal-bookmark-fill me-2"></i> Gestion des Modules
</h3>

<div class="mb-3 d-flex gap-3 align-items-center flex-wrap">
    <input placeholder="Nom du module" @bind="nomModule" class="form-control w-auto flex-grow-1" />

    <select @bind="sessionId" class="form-select w-auto" style="max-width: 200px;">
        <option value="">-- Choisir Session --</option>
        @foreach (var session in sessions)
        {
            <option value="@session.Id">@session.Nom</option>
        }
    </select>

    <select @bind="salleId" class="form-select w-auto" style="max-width: 200px;">
        <option value="">-- Choisir Salle --</option>
        @foreach (var salle in salles)
        {
            <option value="@salle.Id">@salle.NomSalle</option>
        }
    </select>

    <button class="btn btn-primary" @onclick="SauvegarderModule">
        <i class="bi bi-check-circle-fill"></i> @(isEditing ? "Modifier" : "Ajouter")
    </button>
    @if (isEditing)
    {
        <button class="btn btn-secondary ms-2" @onclick="AnnulerEdition">
            <i class="bi bi-x-circle-fill"></i> Annuler
        </button>
    }
</div>

<div class="table-responsive shadow-sm rounded-3 bg-white p-3">
    <table class="table table-striped table-hover align-middle mb-0">
        <thead class="table-primary">
            <tr>
                <th style="width:5%;">#</th>
                <th style="width:30%;">Nom</th>
                <th style="width:20%;">Session</th>
                <th style="width:25%;">Salle Assignée</th>
                <th style="width:20%;">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var module in modulesPage)
            {
                <tr>
                    <td>@module.Id</td>
                    <td>@module.Nom</td>
                    <td>@module.Session</td>
                    <td>@(module.SalleAffectee ?? "Aucune")</td>
                    <td>
                        <div class="d-flex flex-nowrap gap-2">
                            <button class="btn btn-warning btn-sm" @onclick="() => EditerModule(module)">
                                <i class="bi bi-pencil-fill"></i> Modifier
                            </button>

                            <button class="btn btn-danger btn-sm" @onclick="() => SupprimerModule(module.Id)">
                                <i class="bi bi-trash-fill"></i> Supprimer
                            </button>

                            @if (module.SalleAffectee != null)
                            {
                                <button class="btn btn-secondary btn-sm" @onclick="() => DesaffecterSalle(module.Id)">
                                    <i class="bi bi-door-closed-fill"></i> Désaffecter Salle
                                </button>
                            }
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<nav aria-label="Pagination" class="mt-3 d-flex justify-content-center">
    <ul class="pagination pagination-sm mb-0">
        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
            <button class="page-link" @onclick="PreviousPage" aria-label="Précédent">‹</button>
        </li>
        @for (int i = 1; i <= totalPages; i++)
        {
            <li class="page-item @(currentPage == i ? "active" : "")" aria-current="@(currentPage == i ? "page" : null)">
                <button class="page-link" @onclick="(() => GoToPage(i))">@i</button>
            </li>
        }
        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
            <button class="page-link" @onclick="NextPage" aria-label="Suivant">›</button>
        </li>
    </ul>
</nav>

@code {
    private List<ModuleDTO> modules = new();
    private List<ModuleDTO> modulesPage = new();
    private List<SalleDTO> salles = new();
    private List<SessionDTO> sessions = new();

    private string nomModule;
    private int? sessionId;
    private int? salleId;

    private bool isEditing = false;
    private int editingModuleId;

    private int currentPage = 1;
    private int pageSize = 5;
    private int totalPages => (int)Math.Ceiling((double)modules.Count / pageSize);

    protected override async Task OnInitializedAsync()
    {
        await ChargerDonnees();
    }

    private async Task ChargerDonnees()
    {
        modules = await UseCase.GetAllModulesAsync();
        salles = await UseCase.GetAllSallesAsync();
        sessions = await UseCase.GetAllSessionsAsync(); // 🔹 il faut ajouter cette méthode au UseCase
        UpdatePagedData();
    }

    private void UpdatePagedData()
    {
        modulesPage = modules
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private async Task SauvegarderModule()
    {
        if (string.IsNullOrWhiteSpace(nomModule) || sessionId == null)
        {
            await JS.InvokeVoidAsync("alert", "Le nom et la session sont obligatoires.");
            return;
        }

        bool success;
        if (isEditing)
        {
            success = await UseCase.ModifierModuleAsync(editingModuleId, nomModule, sessionId, salleId);
        }
        else
        {
            success = await UseCase.AjouterModuleAsync(nomModule, sessionId, salleId);
        }

        if (success)
        {
            await JS.InvokeVoidAsync("alert", isEditing ? "Module modifié." : "Module ajouté.");
            await ReinitialiserFormulaire();
            await ChargerDonnees();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Erreur lors de l'opération.");
        }
    }

    private async Task SupprimerModule(int moduleId)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Confirmez-vous la suppression ?");
        if (!confirmed) return;

        var success = await UseCase.SupprimerModuleAsync(moduleId);
        if (success)
        {
            await JS.InvokeVoidAsync("alert", "Module supprimé.");
            await ChargerDonnees();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Erreur lors de la suppression.");
        }
    }

    private void EditerModule(ModuleDTO module)
    {
        isEditing = true;
        editingModuleId = module.Id;
        nomModule = module.Nom;
        sessionId = sessions.FirstOrDefault(s => s.Nom == module.Session)?.Id;
        salleId = salles.FirstOrDefault(s => s.NomSalle == module.SalleAffectee)?.Id;
    }

    private async Task AnnulerEdition()
    {
        await ReinitialiserFormulaire();
    }

    private async Task ReinitialiserFormulaire()
    {
        nomModule = "";
        sessionId = null;
        salleId = null;
        isEditing = false;
        editingModuleId = 0;
    }

    private async Task DesaffecterSalle(int moduleId)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Confirmez-vous la désaffectation de la salle ?");
        if (!confirmed) return;

        var success = await UseCase.DesaffecterSalleDuModuleAsync(moduleId);
        if (success)
        {
            await JS.InvokeVoidAsync("alert", "Salle désaffectée du module.");
            await ChargerDonnees();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Erreur lors de la désaffectation.");
        }
    }

    private void GoToPage(int page)
    {
        if (page != currentPage)
        {
            currentPage = page;
            UpdatePagedData();
            StateHasChanged();
        }
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            UpdatePagedData();
            StateHasChanged();
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            UpdatePagedData();
            StateHasChanged();
        }
    }
}
